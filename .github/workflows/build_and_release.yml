on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  release:
    types:
      - released

jobs:
  static-build:
    runs-on: ubuntu-latest
    container: "alpine:latest"
    strategy:
      matrix:
        include:
          # cross toolchain downloads from: https://musl.cc/
          # you need to find the name ${cross_host}-cross.tgz
          # openssl_compiler choose from openssl source directory `./Configure LIST`
          - cross_host: arm-linux-musleabi
            openssl_compiler: linux-armv4
          - cross_host: aarch64-linux-musl
            openssl_compiler: linux-aarch64
          - cross_host: mips-linux-musl
            openssl_compiler: linux-mips32
          - cross_host: mipsel-linux-musl
            openssl_compiler: linux-mips32
          - cross_host: mips64-linux-musl
            openssl_compiler: linux64-mips64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: install build dependencies
        run: |
          apk add gcc \
            g++ \
            git \
            make \
            file \
            perl \
            autoconf \
            automake \
            libtool \
            tar \
            jq \
            pkgconfig \
            linux-headers
      - name: cross compile nox-static
        env:
          CROSS_HOST: "${{ matrix.cross_host }}"
          OPENSSL_COMPILER: "${{ matrix.openssl_compiler }}"
        run: |
          mkdir -p /cross_root /usr/src/zlib /usr/src/openssl
          export PATH="/cross_root/bin:${PATH}"
          export CROSS_PREFIX="/cross_root/${CROSS_HOST}"
          export PKG_CONFIG_PATH="${CROSS_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
          wget -qO- "https://musl.cc/${CROSS_HOST}-cross.tgz" | tar -zxf - --strip-components=1 -C /cross_root/
          zlib_latest_url="$(wget -qO- https://api.github.com/repos/madler/zlib/tags | jq -r '.[0].tarball_url')"
          wget -qO- "${zlib_latest_url}" | tar -zxf - --strip-components=1 -C /usr/src/zlib
          cd /usr/src/zlib
          CHOST="${CROSS_HOST}" ./configure --prefix="${CROSS_PREFIX}" --static
          make -j$(nproc)
          make install
          openssl_file_name="$(wget -qO- https://github.com/openssl/openssl/releases | grep -o 'OpenSSL_1_1.*.tar.gz' | head -1)"
          wget -qO- "https://github.com/openssl/openssl/archive/${openssl_file_name}" | tar -zxf - --strip-components=1 -C /usr/src/openssl
          cd /usr/src/openssl
          ./Configure -static --cross-compile-prefix="${CROSS_HOST}-" --prefix="${CROSS_PREFIX}" "${OPENSSL_COMPILER}"
          make -j$(nproc)
          make install_sw
          boost_latest_url="$(wget -qO- https://www.boost.org/users/download/ | grep -o 'http[^"]*.tar.bz2')"
          wget -qO- "${boost_latest_url}" | tar -jxf - --strip-components=1 -C /usr/src/boost
          cd /usr/src/boost
          ./bootstrap.sh
          sed -i "s/using gcc.*/using gcc : cross : ${CROSS_HOST}-g++ ;/" project-config.jam
          ./b2 install --prefix="${CROSS_PREFIX}" --with-system toolset=gcc-cross variant=release link=static runtime-link=static
          qt_tag="$(wget -qO- https://api.github.com/repos/qt/qtbase/tags | jq -r "[.[].name | select(test(\"^v${QT_VER_PREFIX}(\\\.\\\d+)*$\"))] | max")"
          [ -d /usr/src/qtbase/ ] || \
            git clone --branch "${qt_tag}" --recursive -j$(nproc) --depth 1 https://github.com/qt/qtbase.git "/usr/src/qtbase"
          cd /usr/src/qtbase
          # Remove some options no support by this toolchain
          find -name '*.conf' -print0 | xargs -0 -r sed -i 's/-fno-fat-lto-objects//g'
          find -name '*.conf' -print0 | xargs -0 -r sed -i 's/-fuse-linker-plugin//g'
          find -name '*.conf' -print0 | xargs -0 -r sed -i 's/-mfloat-abi=softfp//g'
          ./configure --prefix=/opt/qt/ -optimize-size -silent --openssl-linked \
            -static -opensource -confirm-license -release -c++std c++14 -no-opengl \
            -no-dbus -no-widgets -no-gui -no-compile-examples -ltcg -make libs -no-pch \
            -nomake tests -nomake examples -no-xcb -no-feature-testlib -no-feature-sql \
            -hostprefix /cross_root -device "${QT_DEVICE}" -device-option CROSS_COMPILE="${CROSS_HOST}-" \
            -sysroot "${CROSS_PREFIX}"
          make -j$(nproc)
          make install
          [ -d /usr/src/qttools ] || \
            git clone --branch "${qt_tag}" --recursive -j$(nproc) --depth 1 https://github.com/qt/qttools.git "/usr/src/qttools"
          cd /usr/src/qttools
          qmake -set prefix "/cross_root"
          qmake
          # Remove some options no support by this toolchain
          find -name '*.conf' -print0 | xargs -0 -r sed -i 's/-fno-fat-lto-objects//g'
          find -name '*.conf' -print0 | xargs -0 -r sed -i 's/-fuse-linker-plugin//g'
          find -name '*.conf' -print0 | xargs -0 -r sed -i 's/-mfloat-abi=softfp//g'
          make -j$(nproc)
          make install
          cd /cross_root/bin
          ln -sf lrelease "lrelease-qt${qt_tag:1:1}"
          wget -qO- "https://github.com/arvidn/libtorrent/archive/${LIBTORRENT_BRANCH}.tar.gz" | tar -zxf - --strip-components=1 -C /usr/src/libtorrent
          cd /usr/src/libtorrent
          ./bootstrap.sh CXXFLAGS='-std=c++14' --host="${CROSS_HOST}" --prefix="${CROSS_PREFIX}" --enable-static --disable-shared --with-boost="${CROSS_PREFIX}"
          make -j$(nproc)
          make install
          cd "${GITHUB_WORKSPACE}"
          ./configure --host="${CROSS_HOST}" --prefix="${CROSS_PREFIX}" --disable-gui --with-boost="${CROSS_PREFIX}" CXXFLAGS='-std=c++14' LDFLAGS='-s -static --static'
          make -j$(nproc)
          make install
          cp -fv "${CROSS_PREFIX}/bin/qbittorrent-nox" /tmp/
      - name: zip archiving
        if: startsWith(github.ref, 'refs/tags/')
        env:
          CROSS_HOST: "${{ matrix.cross_host }}"
        run: |
          apk add zip
          zip -j9v /tmp/qbittorrent-nox_${CROSS_HOST}_static.zip /tmp/qbittorrent-nox
      - name: Upload Github Assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: /tmp/qbittorrent-nox_${{ matrix.cross_host }}_static.zip
          tag: ${{ github.ref }}
          overwrite: true
